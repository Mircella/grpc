// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weather/weather.proto

package kz.mircella.grpc.weather;

/**
 * Protobuf type {@code weather.WeatherResponse}
 */
public  final class WeatherResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:weather.WeatherResponse)
    WeatherResponseOrBuilder {
  // Use WeatherResponse.newBuilder() to construct.
  private WeatherResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WeatherResponse() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private WeatherResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            kz.mircella.grpc.weather.Temperature.Builder subBuilder = null;
            if (temperature_ != null) {
              subBuilder = temperature_.toBuilder();
            }
            temperature_ = input.readMessage(kz.mircella.grpc.weather.Temperature.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(temperature_);
              temperature_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            kz.mircella.grpc.weather.Humidity.Builder subBuilder = null;
            if (humidity_ != null) {
              subBuilder = humidity_.toBuilder();
            }
            humidity_ = input.readMessage(kz.mircella.grpc.weather.Humidity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(humidity_);
              humidity_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return kz.mircella.grpc.weather.Weather.internal_static_weather_WeatherResponse_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return kz.mircella.grpc.weather.Weather.internal_static_weather_WeatherResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            kz.mircella.grpc.weather.WeatherResponse.class, kz.mircella.grpc.weather.WeatherResponse.Builder.class);
  }

  public static final int TEMPERATURE_FIELD_NUMBER = 1;
  private kz.mircella.grpc.weather.Temperature temperature_;
  /**
   * <code>.weather.Temperature temperature = 1;</code>
   */
  public boolean hasTemperature() {
    return temperature_ != null;
  }
  /**
   * <code>.weather.Temperature temperature = 1;</code>
   */
  public kz.mircella.grpc.weather.Temperature getTemperature() {
    return temperature_ == null ? kz.mircella.grpc.weather.Temperature.getDefaultInstance() : temperature_;
  }
  /**
   * <code>.weather.Temperature temperature = 1;</code>
   */
  public kz.mircella.grpc.weather.TemperatureOrBuilder getTemperatureOrBuilder() {
    return getTemperature();
  }

  public static final int HUMIDITY_FIELD_NUMBER = 2;
  private kz.mircella.grpc.weather.Humidity humidity_;
  /**
   * <code>.weather.Humidity humidity = 2;</code>
   */
  public boolean hasHumidity() {
    return humidity_ != null;
  }
  /**
   * <code>.weather.Humidity humidity = 2;</code>
   */
  public kz.mircella.grpc.weather.Humidity getHumidity() {
    return humidity_ == null ? kz.mircella.grpc.weather.Humidity.getDefaultInstance() : humidity_;
  }
  /**
   * <code>.weather.Humidity humidity = 2;</code>
   */
  public kz.mircella.grpc.weather.HumidityOrBuilder getHumidityOrBuilder() {
    return getHumidity();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (temperature_ != null) {
      output.writeMessage(1, getTemperature());
    }
    if (humidity_ != null) {
      output.writeMessage(2, getHumidity());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (temperature_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTemperature());
    }
    if (humidity_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getHumidity());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof kz.mircella.grpc.weather.WeatherResponse)) {
      return super.equals(obj);
    }
    kz.mircella.grpc.weather.WeatherResponse other = (kz.mircella.grpc.weather.WeatherResponse) obj;

    boolean result = true;
    result = result && (hasTemperature() == other.hasTemperature());
    if (hasTemperature()) {
      result = result && getTemperature()
          .equals(other.getTemperature());
    }
    result = result && (hasHumidity() == other.hasHumidity());
    if (hasHumidity()) {
      result = result && getHumidity()
          .equals(other.getHumidity());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTemperature()) {
      hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + getTemperature().hashCode();
    }
    if (hasHumidity()) {
      hash = (37 * hash) + HUMIDITY_FIELD_NUMBER;
      hash = (53 * hash) + getHumidity().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static kz.mircella.grpc.weather.WeatherResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(kz.mircella.grpc.weather.WeatherResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code weather.WeatherResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:weather.WeatherResponse)
      kz.mircella.grpc.weather.WeatherResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return kz.mircella.grpc.weather.Weather.internal_static_weather_WeatherResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return kz.mircella.grpc.weather.Weather.internal_static_weather_WeatherResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              kz.mircella.grpc.weather.WeatherResponse.class, kz.mircella.grpc.weather.WeatherResponse.Builder.class);
    }

    // Construct using kz.mircella.grpc.weather.WeatherResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (temperatureBuilder_ == null) {
        temperature_ = null;
      } else {
        temperature_ = null;
        temperatureBuilder_ = null;
      }
      if (humidityBuilder_ == null) {
        humidity_ = null;
      } else {
        humidity_ = null;
        humidityBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return kz.mircella.grpc.weather.Weather.internal_static_weather_WeatherResponse_descriptor;
    }

    public kz.mircella.grpc.weather.WeatherResponse getDefaultInstanceForType() {
      return kz.mircella.grpc.weather.WeatherResponse.getDefaultInstance();
    }

    public kz.mircella.grpc.weather.WeatherResponse build() {
      kz.mircella.grpc.weather.WeatherResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public kz.mircella.grpc.weather.WeatherResponse buildPartial() {
      kz.mircella.grpc.weather.WeatherResponse result = new kz.mircella.grpc.weather.WeatherResponse(this);
      if (temperatureBuilder_ == null) {
        result.temperature_ = temperature_;
      } else {
        result.temperature_ = temperatureBuilder_.build();
      }
      if (humidityBuilder_ == null) {
        result.humidity_ = humidity_;
      } else {
        result.humidity_ = humidityBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof kz.mircella.grpc.weather.WeatherResponse) {
        return mergeFrom((kz.mircella.grpc.weather.WeatherResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(kz.mircella.grpc.weather.WeatherResponse other) {
      if (other == kz.mircella.grpc.weather.WeatherResponse.getDefaultInstance()) return this;
      if (other.hasTemperature()) {
        mergeTemperature(other.getTemperature());
      }
      if (other.hasHumidity()) {
        mergeHumidity(other.getHumidity());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      kz.mircella.grpc.weather.WeatherResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (kz.mircella.grpc.weather.WeatherResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private kz.mircella.grpc.weather.Temperature temperature_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        kz.mircella.grpc.weather.Temperature, kz.mircella.grpc.weather.Temperature.Builder, kz.mircella.grpc.weather.TemperatureOrBuilder> temperatureBuilder_;
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public boolean hasTemperature() {
      return temperatureBuilder_ != null || temperature_ != null;
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public kz.mircella.grpc.weather.Temperature getTemperature() {
      if (temperatureBuilder_ == null) {
        return temperature_ == null ? kz.mircella.grpc.weather.Temperature.getDefaultInstance() : temperature_;
      } else {
        return temperatureBuilder_.getMessage();
      }
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public Builder setTemperature(kz.mircella.grpc.weather.Temperature value) {
      if (temperatureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        temperature_ = value;
        onChanged();
      } else {
        temperatureBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public Builder setTemperature(
        kz.mircella.grpc.weather.Temperature.Builder builderForValue) {
      if (temperatureBuilder_ == null) {
        temperature_ = builderForValue.build();
        onChanged();
      } else {
        temperatureBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public Builder mergeTemperature(kz.mircella.grpc.weather.Temperature value) {
      if (temperatureBuilder_ == null) {
        if (temperature_ != null) {
          temperature_ =
            kz.mircella.grpc.weather.Temperature.newBuilder(temperature_).mergeFrom(value).buildPartial();
        } else {
          temperature_ = value;
        }
        onChanged();
      } else {
        temperatureBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public Builder clearTemperature() {
      if (temperatureBuilder_ == null) {
        temperature_ = null;
        onChanged();
      } else {
        temperature_ = null;
        temperatureBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public kz.mircella.grpc.weather.Temperature.Builder getTemperatureBuilder() {
      
      onChanged();
      return getTemperatureFieldBuilder().getBuilder();
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    public kz.mircella.grpc.weather.TemperatureOrBuilder getTemperatureOrBuilder() {
      if (temperatureBuilder_ != null) {
        return temperatureBuilder_.getMessageOrBuilder();
      } else {
        return temperature_ == null ?
            kz.mircella.grpc.weather.Temperature.getDefaultInstance() : temperature_;
      }
    }
    /**
     * <code>.weather.Temperature temperature = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        kz.mircella.grpc.weather.Temperature, kz.mircella.grpc.weather.Temperature.Builder, kz.mircella.grpc.weather.TemperatureOrBuilder> 
        getTemperatureFieldBuilder() {
      if (temperatureBuilder_ == null) {
        temperatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            kz.mircella.grpc.weather.Temperature, kz.mircella.grpc.weather.Temperature.Builder, kz.mircella.grpc.weather.TemperatureOrBuilder>(
                getTemperature(),
                getParentForChildren(),
                isClean());
        temperature_ = null;
      }
      return temperatureBuilder_;
    }

    private kz.mircella.grpc.weather.Humidity humidity_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        kz.mircella.grpc.weather.Humidity, kz.mircella.grpc.weather.Humidity.Builder, kz.mircella.grpc.weather.HumidityOrBuilder> humidityBuilder_;
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public boolean hasHumidity() {
      return humidityBuilder_ != null || humidity_ != null;
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public kz.mircella.grpc.weather.Humidity getHumidity() {
      if (humidityBuilder_ == null) {
        return humidity_ == null ? kz.mircella.grpc.weather.Humidity.getDefaultInstance() : humidity_;
      } else {
        return humidityBuilder_.getMessage();
      }
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public Builder setHumidity(kz.mircella.grpc.weather.Humidity value) {
      if (humidityBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        humidity_ = value;
        onChanged();
      } else {
        humidityBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public Builder setHumidity(
        kz.mircella.grpc.weather.Humidity.Builder builderForValue) {
      if (humidityBuilder_ == null) {
        humidity_ = builderForValue.build();
        onChanged();
      } else {
        humidityBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public Builder mergeHumidity(kz.mircella.grpc.weather.Humidity value) {
      if (humidityBuilder_ == null) {
        if (humidity_ != null) {
          humidity_ =
            kz.mircella.grpc.weather.Humidity.newBuilder(humidity_).mergeFrom(value).buildPartial();
        } else {
          humidity_ = value;
        }
        onChanged();
      } else {
        humidityBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public Builder clearHumidity() {
      if (humidityBuilder_ == null) {
        humidity_ = null;
        onChanged();
      } else {
        humidity_ = null;
        humidityBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public kz.mircella.grpc.weather.Humidity.Builder getHumidityBuilder() {
      
      onChanged();
      return getHumidityFieldBuilder().getBuilder();
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    public kz.mircella.grpc.weather.HumidityOrBuilder getHumidityOrBuilder() {
      if (humidityBuilder_ != null) {
        return humidityBuilder_.getMessageOrBuilder();
      } else {
        return humidity_ == null ?
            kz.mircella.grpc.weather.Humidity.getDefaultInstance() : humidity_;
      }
    }
    /**
     * <code>.weather.Humidity humidity = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        kz.mircella.grpc.weather.Humidity, kz.mircella.grpc.weather.Humidity.Builder, kz.mircella.grpc.weather.HumidityOrBuilder> 
        getHumidityFieldBuilder() {
      if (humidityBuilder_ == null) {
        humidityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            kz.mircella.grpc.weather.Humidity, kz.mircella.grpc.weather.Humidity.Builder, kz.mircella.grpc.weather.HumidityOrBuilder>(
                getHumidity(),
                getParentForChildren(),
                isClean());
        humidity_ = null;
      }
      return humidityBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:weather.WeatherResponse)
  }

  // @@protoc_insertion_point(class_scope:weather.WeatherResponse)
  private static final kz.mircella.grpc.weather.WeatherResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new kz.mircella.grpc.weather.WeatherResponse();
  }

  public static kz.mircella.grpc.weather.WeatherResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WeatherResponse>
      PARSER = new com.google.protobuf.AbstractParser<WeatherResponse>() {
    public WeatherResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new WeatherResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WeatherResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WeatherResponse> getParserForType() {
    return PARSER;
  }

  public kz.mircella.grpc.weather.WeatherResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

